{"ast":null,"code":"var _jsxFileName = \"/Users/leerisharvind/Documents/HitWicket_Submission/client/chessapp/src/GameBoard.js\";\n// import React from 'react';\n\n// const GameBoard = ({ gameState, websocket }) => {\n//     const handleClick = (row, col) => {\n//         // Handle character selection and move\n//         // Update the move command based on user interaction\n//         const moveCommand = prompt(\"Enter move command (e.g., FR, BL)\");\n//         if (moveCommand) {\n//             const message = JSON.stringify({\n//                 type: 'move',\n//                 player: gameState.currentPlayer,\n//                 character: `P:${moveCommand}`, // Example for Pawn\n//                 move: moveCommand\n//             });\n//             websocket.send(message);\n//         }\n//     };\n\n//     return (\n//         <div style={{ display: 'grid', gridTemplateColumns: `repeat(${5}, 50px)` }}>\n//             {gameState.grid.map((row, rowIndex) =>\n//                 row.map((cell, colIndex) => (\n//                     <div\n//                         key={`${rowIndex}-${colIndex}`}\n//                         onClick={() => handleClick(rowIndex, colIndex)}\n//                         style={{\n//                             width: '50px',\n//                             height: '50px',\n//                             border: '1px solid black',\n//                             backgroundColor: (rowIndex + colIndex) % 2 === 0 ? 'white' : 'gray',\n//                             display: 'flex',\n//                             alignItems: 'center',\n//                             justifyContent: 'center'\n//                         }}\n//                     >\n//                         {cell}\n//                     </div>\n//                 ))\n//             )}\n//         </div>\n//     );\n// };\n\n// export default GameBoard;\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  gameState,\n  websocket\n}) => {\n  const handleClick = (row, col) => {\n    // Handle character selection and move\n    const moveCommand = prompt(\"Enter move command (e.g., FR, BL)\");\n    if (moveCommand) {\n      const message = JSON.stringify({\n        type: 'move',\n        player: gameState.currentPlayer,\n        character: `P:${moveCommand}`,\n        // Example for Pawn\n        move: moveCommand\n      });\n      websocket.send(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${5}, 50px)`\n    },\n    children: gameState.grid.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClick(rowIndex, colIndex),\n      style: {\n        width: '50px',\n        height: '50px',\n        border: '1px solid black',\n        backgroundColor: (rowIndex + colIndex) % 2 === 0 ? 'white' : 'gray',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: '18px',\n        // Increase font size for better visibility\n        fontWeight: 'bold' // Make the pieces bold\n      },\n      children: cell ? cell : \"\"\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GameBoard","gameState","websocket","handleClick","row","col","moveCommand","prompt","message","JSON","stringify","type","player","currentPlayer","character","move","send","style","display","gridTemplateColumns","children","grid","map","rowIndex","cell","colIndex","onClick","width","height","border","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leerisharvind/Documents/HitWicket_Submission/client/chessapp/src/GameBoard.js"],"sourcesContent":["// import React from 'react';\n\n// const GameBoard = ({ gameState, websocket }) => {\n//     const handleClick = (row, col) => {\n//         // Handle character selection and move\n//         // Update the move command based on user interaction\n//         const moveCommand = prompt(\"Enter move command (e.g., FR, BL)\");\n//         if (moveCommand) {\n//             const message = JSON.stringify({\n//                 type: 'move',\n//                 player: gameState.currentPlayer,\n//                 character: `P:${moveCommand}`, // Example for Pawn\n//                 move: moveCommand\n//             });\n//             websocket.send(message);\n//         }\n//     };\n\n//     return (\n//         <div style={{ display: 'grid', gridTemplateColumns: `repeat(${5}, 50px)` }}>\n//             {gameState.grid.map((row, rowIndex) =>\n//                 row.map((cell, colIndex) => (\n//                     <div\n//                         key={`${rowIndex}-${colIndex}`}\n//                         onClick={() => handleClick(rowIndex, colIndex)}\n//                         style={{\n//                             width: '50px',\n//                             height: '50px',\n//                             border: '1px solid black',\n//                             backgroundColor: (rowIndex + colIndex) % 2 === 0 ? 'white' : 'gray',\n//                             display: 'flex',\n//                             alignItems: 'center',\n//                             justifyContent: 'center'\n//                         }}\n//                     >\n//                         {cell}\n//                     </div>\n//                 ))\n//             )}\n//         </div>\n//     );\n// };\n\n// export default GameBoard;\n\nimport React from 'react';\n\nconst GameBoard = ({ gameState, websocket }) => {\n    const handleClick = (row, col) => {\n        // Handle character selection and move\n        const moveCommand = prompt(\"Enter move command (e.g., FR, BL)\");\n        if (moveCommand) {\n            const message = JSON.stringify({\n                type: 'move',\n                player: gameState.currentPlayer,\n                character: `P:${moveCommand}`, // Example for Pawn\n                move: moveCommand\n            });\n            websocket.send(message);\n        }\n    };\n\n    return (\n        <div style={{ display: 'grid', gridTemplateColumns: `repeat(${5}, 50px)` }}>\n            {gameState.grid.map((row, rowIndex) =>\n                row.map((cell, colIndex) => (\n                    <div\n                        key={`${rowIndex}-${colIndex}`}\n                        onClick={() => handleClick(rowIndex, colIndex)}\n                        style={{\n                            width: '50px',\n                            height: '50px',\n                            border: '1px solid black',\n                            backgroundColor: (rowIndex + colIndex) % 2 === 0 ? 'white' : 'gray',\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            fontSize: '18px',  // Increase font size for better visibility\n                            fontWeight: 'bold'  // Make the pieces bold\n                        }}\n                    >\n                        {/* Render the character piece or leave empty if no piece */}\n                        {cell ? cell : \"\"}\n                    </div>\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default GameBoard;\n\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAC5C,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC9B;IACA,MAAMC,WAAW,GAAGC,MAAM,CAAC,mCAAmC,CAAC;IAC/D,IAAID,WAAW,EAAE;MACb,MAAME,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;QAC3BC,IAAI,EAAE,MAAM;QACZC,MAAM,EAAEX,SAAS,CAACY,aAAa;QAC/BC,SAAS,EAAE,KAAKR,WAAW,EAAE;QAAE;QAC/BS,IAAI,EAAET;MACV,CAAC,CAAC;MACFJ,SAAS,CAACc,IAAI,CAACR,OAAO,CAAC;IAC3B;EACJ,CAAC;EAED,oBACIT,OAAA;IAAKkB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,mBAAmB,EAAE,UAAU,CAAC;IAAU,CAAE;IAAAC,QAAA,EACtEnB,SAAS,CAACoB,IAAI,CAACC,GAAG,CAAC,CAAClB,GAAG,EAAEmB,QAAQ,KAC9BnB,GAAG,CAACkB,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACnB1B,OAAA;MAEI2B,OAAO,EAAEA,CAAA,KAAMvB,WAAW,CAACoB,QAAQ,EAAEE,QAAQ,CAAE;MAC/CR,KAAK,EAAE;QACHU,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,MAAM,EAAE,iBAAiB;QACzBC,eAAe,EAAE,CAACP,QAAQ,GAAGE,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,MAAM;QACnEP,OAAO,EAAE,MAAM;QACfa,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,QAAQ,EAAE,MAAM;QAAG;QACnBC,UAAU,EAAE,MAAM,CAAE;MACxB,CAAE;MAAAd,QAAA,EAGDI,IAAI,GAAGA,IAAI,GAAG;IAAE,GAfZ,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgB7B,CACR,CACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACC,EAAA,GAzCIvC,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}